# -*- coding: utf-8 -*-
"""python_data_types.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WgHqYxSKWmggvzp-dmmEpP5x_aX8ZJi7
"""

#exercise heritage
1256983%28

((12**52)%15)<8 or ((3**5)>100)

5*(3**3)!=(900/75)

'[[]]'[0:2:]+'PYTHON'+'[[]]'[2:4:]

'Python'[4:7:]*4

'Perl'[2]*6

'python'[0:3:].upper()+ 'python'[3::]

'python'[0]*len('python')
'git'[0]*len('git')

'zuhdgfiujashunxoklkands'.count ('a')

print(7+3*2)
print('7'+str(3*2))
print('7'+'3*2')
print('7'+3*2)

my_name='Těpéro'
my_name
My_name

day='1st'
month='November'
year='2018'

of='-'

date= year+of+month+of+day
'Today we are the {0} of {1} {2}.'.format(day, month, year)

#dunno how to do this one: Transform variable date = '2018-11-01' to '01/11' using format
'/'.format(20181101)

noun='mom'
adjective='fat'
phrase= 'your {0}´s {1}.'.format(noun, adjective)
phrase.upper()

'{:0.3f}'.format(3.141592653589793)

name='Mario'
the_other_one='Luigi'
'It´s me {0} and this is my brother {1}.'.format(name, the_other_one)

my_list = ['apple', 42, 'john',['a','b']]
type (my_list)
my_list[3]='banana'
my_list

nucl='anna'
list(nucl)

name= 'Anna'
my_name= list(name)
my_name[0]='E'
len(my_name)
numbers= ['one', 'two','three','four', 'five']
odd_numbers= numbers [0::2]
odd_numbers

numbers*3
numbers.append('six')
del numbers[4]

even_numbers= numbers[1::2]
all_numbers= even_numbers+odd_numbers
all_numbers.sort()
print(all_numbers)
dir(list)

#exercise lists n.1Create list of your hobbies by adding elements to the empty list (the favourite one will be the first)
hobbies=['programming in Python','studying for programming class','watching indian dudes explain github','sleeping']
#Print the hobby you like most
print(hobbies[0])
#Print the hobby you like least
print(hobbies[-1])
#Delete it
del hobbies[0::]
hobbies

#List of the Czech cities sorted by population size
cities = ['Prague', 'Brno', 'Ostrava', 'Plzen', 'Liberec', 'Olomouc', 'Usti nad Labem', 'Hradec Kralove', 'Ceske Budejovice', 'Pardubice']
#Sort cities in alphabetical order
cities.sort()
print(cities)
#Using "".join() join cities into one string separated by asterix (*)
'*'.join(cities)

#set- unordered, mutable
christmas_present_ideas = {'socks','knitted scarf','kitchen gadget','candle','theatre tickets'}
birthday_present_ideas ={'cake','book', 'theatre tickets','socks'}
christmas_present_ideas.intersection(birthday_present_ideas)

christmas_present_ideas.difference(birthday_present_ideas)
birthday_present_ideas.difference(christmas_present_ideas)

#tuple- unordered, immutable
my_tuple=('a','b','c')

#dictionary  Complex data type, each element contain key:value pair;Key can be any immutable data type, value can be any data type
info= {'fist_name':'Maho','last_name':'Iacotitch','residence':'Chrustenice'}
info['last_name']
#getting them keys and values
info.values()
info.keys()
#keys cannot duplicate,but values can
#adding pairs
info['birthday']='01/04/1969'

info.items()
#deleting pairs
del info ['residence']
#dir(dict)

#Find what letters are not present in the Zen of Python
alphabet = 'abcdefghijklmnopqrstuvwxyz'
zen = """
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!"""
letters =set (list(alphabet))
text= set (list(zen))
letters.difference(text)

#Fix dictionary and delete erroneous key ???? dunno where the error is
d = {'payton':'An interpreted, object-oriented programming language'}
d['payton']
#Use one of the data types and create dictionary, where key will be name and surname (do not put it at one string) and value will be telephone number

#You have a dictionary
info = {('Name', 'Surname'):('John', 'Doe')}
#Extract dictionary value in following format
'_'.join(info[('Name', 'Surname')])